'use client';

import { useTicketsPolling } from "@/hooks/useTicketsPolling";
import { useState } from "react"; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç useState –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { BellOff } from "lucide-react";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import axios from "axios"; // –î–æ–±–∞–≤–ª—è–µ–º axios –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

export function decodeHtmlAndParse(encodedHtml) {
  const textarea = document.createElement("textarea");
  textarea.innerHTML = encodedHtml;
  const decoded = textarea.value;

  const div = document.createElement("div");
  div.innerHTML = decoded;

  const parsedBlocks = [];

  Array.from(div.children).forEach((child) => {
    const strong = child.querySelector("strong");
    if (strong) {
      const label = strong.textContent
        .trim()
        .replace(/^(\d+\))?\s*/g, "")
        .replace(" :", "");
      const value = child.innerText.replace(strong.textContent, "").trim();
      parsedBlocks.push({ label, value });
    }
  });

  // üëâ –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–æ–±—å—ë–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  if (parsedBlocks.length === 0) {
    const lines = decoded.split("\n").map((line) => line.trim()).filter(Boolean);
    return lines.map((line, index) => ({ label: `–°—Ç—Ä–æ–∫–∞ ${index + 1}`, value: line }));
  }

  return parsedBlocks;
}

export function TicketSheet({ open, onOpenChange, }) {
  const { tickets, loading, error, setTickets } = useTicketsPolling(60000); // 60 —Å–µ–∫
  const [processingIds, setProcessingIds] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
  
  const handleClose = async (ticketId) => {
    // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
    setProcessingIds(prev => [...prev, ticketId]);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º CSRF-—Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      
      const res = await axios.patch(`/tickets/${ticketId}/close`, {}, {
        headers: {
          'X-CSRF-TOKEN': csrfToken,
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        }
      });
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å ID:', ticketId);


      if (res.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤, —É–¥–∞–ª—è—è –∑–∞–∫—Ä—ã—Ç—ã–π
        setTickets(prev => prev.filter(ticket => ticket[2] !== ticketId));
        alert('–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç');
      } else {
        alert(res.data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞');
    } finally {
      // –£–±–∏—Ä–∞–µ–º ID –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
      setProcessingIds(prev => prev.filter(id => id !== ticketId));
    }
  };

  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent side="right" className="w-[340px] sm:w-[400px]">
        <SheetHeader>
          <SheetTitle>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–æ–∫</SheetTitle>
        </SheetHeader>

        <div className="overflow-y-auto overflow-x-hidden pr-2 h-full">
          <div className="flex flex-col gap-4 p-2 max-h-min">
          {loading && (
              <p className="text-sm text-muted-foreground text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            )}
            {!loading && tickets?.length === 0 && (
              <div className="flex items-center justify-center h-[60vh]">
                <BellOff className="w-4 h-4 mr-2" />
                <p className="text-muted-foreground text-center text-sm">
                  –ó–∞—è–≤–æ–∫ –Ω–µ—Ç
                </p>
              </div>
            )}

            {!loading && tickets?.map((ticket, idx) => (
              <Card key={idx} className="cursor-pointer group relative">
                <CardContent>
                  <div className="flex justify-between items-center text-xs text-muted-foreground">
                    <p>{ticket[8]}</p>
                    <Badge variant="outline" className="text-[10px]">
                      ID: {ticket[2]}
                    </Badge>
                  </div>
                </CardContent>
                <CardHeader>
                  <h2 className="text-xs font-bold uppercase">{ticket[1]}</h2>
                  <p className="text-xs text-muted-foreground">{ticket[15]}</p>
                </CardHeader>
                <CardContent className="max-h-0 overflow-hidden opacity-0 transform scale-95 transition-all duration-300 ease-in-out
             group-hover:max-h-[500px] group-hover:opacity-100 group-hover:scale-100" >
                {decodeHtmlAndParse(ticket[21]).map((item, i) => (
                <div key={i} className="mb-1 text-xs text-muted-foreground">
                  <span className="font-semibold text-white/80">{item.label}:</span>{" "}
                  <span className="">{item.value}</span>
                </div>
                ))}
                </CardContent>
                <div className="p-4 pt-0">
                  <Button 
                    onClick={() => handleClose(ticket[2])}
                    disabled={processingIds.includes(ticket[2])}
                    variant="destructive"
                    size="sm"
                    className="w-full"
                  >
                    {processingIds.includes(ticket[2]) ? '–ó–∞–∫—Ä—ã—Ç–∏–µ...' : '–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É'}
                  </Button>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}